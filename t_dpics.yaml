Variables:
    text2video_root: /volumes/macdrive/projects/text2video
    font_title_color: red
    font_title_bg_color: yellow
    font_color: '#FF0607'
    footer_color: '#EDFFE0'
    text_left: 40
    text_top: 40
    seconds: 10
TUBE:
    # All output files are located in dpics folder    
    - PATH: {text2video_root}
    - GET_KEYS: -f dpics/news.yaml

    # generate news text and background with title
    # outputs: news.txt, bg01_hd_title.png
    - RUN: GenNewsTitleAndBG

    - CMD: stops here --if no
   
    # write news to picture background
    - RUN: WriteTextToImg   

    - CMD: stops here --if no
    
    # outputs: out.mp4
    - RUN_TUBE: CropPicsToVideo
    
    # delete tmp files
    - F_DELETE: dpics/tmp/*.jpg 
    - F_DELETE: dpics/bg*hd*.png
    - F_DELETE: dpics/news.txt
    - F_DELETE: dpics/all_pics.txt
    - F_DELETE: dpics/pics_video.mp4 
    - F_DELETE: dpics/bg_video.mp4

    # draw title, date
    - cmd: >
        ffmpeg -y -i dpics/out.mp4 -filter_complex 
            "drawtext=fontfile='./fonts/南宋书局体.ttf':text='{title}':
                fontcolor=white:fontsize=120:enable='between(t,0,2)':
                borderw=4:bordercolor=#DCFFFF:
                box=1:boxcolor=black@0.8:boxborderw=5:
                x=(w-text_w)/2:y=(h/2)-120:expansion=none,
             drawtext=fontfile='./fonts/南宋书局体.ttf':text='{date}':
                fontcolor=white:fontsize=100:enable='between(t,0,2)':
                borderw=4:bordercolor=#DCFFFF:
                box=1:boxcolor=black@0.8:boxborderw=5:
                x=(w-text_w)/2:y=(h/2)+20:expansion=none"            
            -codec:a copy dpics/dpics.mp4

    # play
    - COMMAND: ffplay dpics/dpics.mp4    

GenNewsTitleAndBG:
    # input: bg01.png, {title}, {content}
    - GET_KEYS: -f dpics/news.yaml
    - RUN: WriteNewsToFile
    # adjust the background picture to 1080:1920
    - COMMAND: ffmpeg -y -i dpics/bg01.png -filter:v "scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920" dpics/bg01_hd.png
    # draw title to background
    - COMMAND: >
        ffmpeg -y -i dpics/bg01_hd.png -filter_complex
             "drawbox=
                x=0:
                y=180:
                color={font_title_bg_color}@1:
                width=1080:height=150:t=fill,
             drawtext=fontfile='fonts/南宋书局体.ttf':
                text='{title}':
                fontcolor={font_title_color}:
                fontsize=100:
                borderw=6:bordercolor=gray:
                x=(w-tw)/2:
                y=200" 
            dpics/bg01_hd_title.png

WriteNewsToFile:
    - set_var: i = 0
    - f_empty: dpics/news.txt -c
    - set_var: loop_times = int(len(content)/10+1)
    - run: WriteLineToText --while i < loop_times

WriteLineToText:
    - set_var: line = content[i*10:i*10 + 10].strip()
    - write_line: -f dpics/news.txt -v {line} --if len(line) > 0
    - set_var: i = i + 1 -g

WriteTextToImg:
    # input: bg02.png, news.txt
    # output: dpics/bg02_hd_news.png
    # adjust background dimension to 1080:1920
    - COMMAND: ffmpeg -y -i dpics/bg02.png -filter:v 
                "scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920" 
                 dpics/bg02_hd.png
    # write news content to background
    - COUNT: -f dpics/news.txt -v news_count
    - SET_VAR: curr_line = 0
    - SET_VAR: fontHeight = 110
    - SET_VAR: font_size = 90
    - SET_VAR: input = dpics/bg02_hd.png
    - SET_VAR: output = 'tmp' -g
    - RUN: WriteLineToImage -w curr_line < news_count
    - cmd: >
        ffmpeg -y -i {output} -vf 
            "drawtext=fontfile='fonts/未央简体.ttf':
            text='{footer}':fontcolor={footer_color}:
            fontsize={font_size} + 20:
            borderw=3:bordercolor=#FFF6F6:
            x=(w-tw)/2:
            y={fontHeight} + 150" 
            {output}_footer.jpg
    - f_cp: -s {output}_footer.jpg -d {output}
    - f_del: '{output}_footer.jpg'

WriteLineToImage:
    - SET_VAR: input = output --if output != 'tmp'
    - SET_VAR: curr_line = curr_line + 1 -g
    - READ_LINE: -f dpics/news.txt -n {curr_line} -v line    
    - SET_VAR: output_tmp = dpics/bg02_hd_news_tmp.png --if output == 'tmp'
    - SET_VAR: output = dpics/bg02_hd_news.png --if output == 'tmp' -g
    - COMMAND: >
        ffmpeg -y -i {input} -vf 
               "drawtext=fontfile='fonts/未央简体.ttf':
                text='{line}':fontcolor={font_color}:
                fontsize={font_size}:
                borderw=4:bordercolor=#FFF6F6:
                x=(w-tw)/2:
                y={fontHeight}" 
                {output_tmp}
    - FILE_COPY: -s {output_tmp} -d {output}
    - FILE_DELETE: {output_tmp}
    - SET_VAR: fontHeight = fontHeight + font_size -g

CropPicsToVideo:
    # input: {output} {seconds}
    # output: out.mp4
    - PATH: '{text2video_root}'
    # bg02_hd_news.png to video: bg_video.mp4
    - COMMAND: ffmpeg -y -loop 1 -i {output} -c:v libx264 -t {seconds} -pix_fmt yuv420p dpics/bg_video.mp4
    # bg_video.mp4 to frames
    - COMMAND: ffmpeg -y -i dpics/bg_video.mp4 ./dpics/tmp/img%03d.jpg
    - LIST_FILES: -d dpics/tmp/*.jpg -r dpics/all_pics.txt -s name
    - COUNT: -f dpics/all_pics.txt -v total_pics
    - SET_VAR: curr_line = 0
    - RUN_TUBE: CROP --while curr_line < total_pics
    - COMMAND: ffmpeg -y -r 25 -i dpics/tmp/img%03d_o.jpg dpics/pics_video.mp4

    # combine the bg02_hd_news.png, pics_video.mp4
    - COMMAND: >
         ffmpeg -y -i dpics/bg01_hd_title.png -i dpics/pics_video.mp4 -filter_complex
            "[1]scale=-1:ih-360,colorkey=0x000000:0.2:0.3[v1];[0][v1]overlay=100:350[out]" 
         -map "[out]" dpics/out.mp4

CROP:
    - SET_VAR: curr_line = curr_line + 1 -g
    - READ_LINE: -f dpics/all_pics.txt -n {curr_line} -v line
    - SET_VAR: line = "{line}".replace(".jpg","") --if {line} != ''
    - COMMAND: ffmpeg -y -i {line}.jpg -filter:v "crop=iw:(1920/{total_pics})*{curr_line}:0:0,pad=1080:1920" {line}_o.jpg --if {line} != ''

Notes: >
    # take 1 frame at a given time
    ffmpeg -ss 5 -i input.mp4 -frames:v 1 out.png

    # how to use one picture to build one video for 10 seconds
    ffmpeg -y -loop 1 -i bg00.jpg -c:v libx264 -t 10 -pix_fmt yuv420p -vf scale=1920:1080 out.mp4

    # how to dynamic show an image over a video
    ffmpeg -y -i out1.mp4 -loop 1 -i bg01.jpg -filter_complex "
                [1:v]scale=1920:1080,crop=w=in_w:h='50t':x=0:y=0[v1];
                [0:v][v1]overlay=0:0:shortest=1[out]
                "
            -map "[out]"  out3.mp4

    # how to use min method to scale an image
    ffmpeg -i bg00.jpg -filter:v "scale='min(1920,iw)':'min(1080,ih)'" out.jpg  

    # scale (decrease) and pad
    ffmpeg -i bg00.jpg -filter:v "scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:-1:-1:color=black" out.jpg

    # scale (increase) and crop
    ffmpeg -i bg00.jpg -filter:v "scale=1920:1080:force_original_aspect_ratio=increase,crop=1920:1080" out.jpg

    # scale increase neighbor
    ffmpeg -i bg00.jpg -filter:v scale=-1:1080 -sws_flags neighbor out.jpg

    # corp first and scale to bigger one 
    ffmpeg -y -i bg99.png -filter_complex "[0]crop=1080/2:1920/2[p1];[p1]scale=-1:1920[out]" -map "[out]" out.png

    # video to images
    ffmpeg -i out.mp4 ./pics/img%03d.jpg

    # crop sequences of images 
    ffmpeg -y -i ./pics/img%03d.jpg -filter:v "crop=iw:ih/10,pad=1920:1080" ./pics/img%03d_o.jpg